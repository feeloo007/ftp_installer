#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# $Id: ftpserver.py 988 2012-01-25 19:11:43Z g.rodola $

#  pyftpdlib is released under the MIT license, reproduced below:
#  ======================================================================
#  Copyright (C) 2007-2012 Giampaolo Rodola' <g.rodola@gmail.com>
#
#                         All Rights Reserved
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
#  ======================================================================


import asyncore
import asynchat
import socket
import os
import sys
import traceback
import errno
import time
import glob
import tempfile
import warnings
import random
import stat
import heapq
import optparse
from tarfile import filemode as _filemode

try:
    import pwd
    import grp
except ImportError:
    pwd = grp = None

# http://code.google.com/p/pysendfile/
try:
    from sendfile import sendfile
except ImportError:
    sendfile = None

_months_map = {1:'Jan', 2:'Feb', 3:'Mar', 4:'Apr', 5:'May', 6:'Jun', 7:'Jul',
               8:'Aug', 9:'Sep', 10:'Oct', 11:'Nov', 12:'Dec'}


def bip( fct ):
    
    def wrapped( *args, **kwargs ):

        import traceback
        from colorama import Fore

        bip_message = ''.join( ' ' for i in range( 2 * ( len( traceback.format_stack() ) - 11 ) ) )

        bip_message += '%s(%s, %s)' % ( fct.__name__, args, kwargs )

        print( Fore.YELLOW + bip_message + Fore.RESET )

        result = fct( *args, **kwargs )

        bip_message += ' = %s' % ( result )

        print( Fore.BLUE + bip_message + Fore.RESET )

        return result
    
    return wrapped 



def update_os( fct ):

    def wrapped( *args, **kwargs ):

        assert( len( args ) == 2 ), u'Le nombre de paramètres est incorrect'

        assert( hasattr( args[ 0 ], 'virtualmap' ) ), u'%s n\'est pas un FTPInstallerAbstractedFS'  % (args[ 0 ] )

        # Passage anticipé par ftpnorm
        args = ( 
                    args[ 0 ], 
                    args[ 0 ].ftpnorm( 
                                          args[ 1 ] 
                                     ) 
               )

        is_virtual, is_remote, datas_for_childs_dir = args[ 0 ].virtualmap.is_virtual( args[ 1 ] )

        if [ is_virtual, is_remote ] == [ True, False ]:

            virtual_os 			= os

            virtual_os.path.isdir 	= lambda path: True

            virtual_os.listdir 		= lambda path: datas_for_childs_dir

            # Méthode utilisée pour revenir à la racine
            # après avoir vérifié qu'il était possible de 
            # rentrer dans un répertoire
            virtual_os.getcwd		= lambda: args[ 0 ].cwd

            def chdir( path ):
               is_virtual, is_remote, datas_for_childs_dir = args[ 0 ].virtualmap.is_virtual( path )

               if is_virtual and not is_remote:
                   print 'CHILD VIRTUAL + NOT REMOTE'
                   #args[ 0 ].cwd = path
               elif is_virtual and is_remote:
                   print 'CHILD VIRTUAL + REMOTE'
                   #args[ 0 ].cwd = path
               elif not is_virtual:
                   import errno
                   raise OSError( errno.ENOENT, path )

            virtual_os.chdir		= lambda path: chdir( path )


            return fct( 
                           *args, 
                           os = virtual_os, 
                           **kwargs 
                   )

        elif [ is_virtual, is_remote ] == [ True, True ]:

            print 'VIRTUAL + REMOTE'

            return fct( 
                           *args, 
                           **kwargs 
                      )

        else:

            print 'NOT VIRTUAL'
           
            args = ( 
                         args[ 0 ], 
                         os.path.normpath( 
                                               os.path.join( 
                                                                 args[ 0 ].root, 
                                                                 args[ 1 ] 
                                                           ) 
                                               ) 
                   )

            return fct( *args, **kwargs )

    return wrapped

# --- filesystem

class VirtualMap( object ):

    __max_keys = 5
    __d_le = {
                 1:   lambda self, appcode                                          : self.__d[ appcode ],
                 2:   lambda self, appcode, env                                     : self.__d[ appcode ][ env ],
                 3:   lambda self, appcode, env, appcomp                            : self.__d[ appcode ][ env ][ appcomp ],
                 4:   lambda self, appcode, env, appcomp, num_component             : self.__d[ appcode ][ env ][ appcomp ][ num_component ],
                 5:   lambda self, appcode, env, appcomp, num_component, aera       : self.__d[ appcode ][ env ][ appcomp ][ num_component ][ aera ],
    }

    def __init__( self ):
        
        self.__d = {
                    'X04': {
                            'R7': { 
                                   'TOMCAT': {
                                              '0001': {
                                                       'VILLE': {
                                                                 'WEBAPP_INSTALLER': {
                                                                                      'LOGIN': 		'X04_0001_WEBAPP_INSTALLER',
                                                                                      'SERVER':		'X04-R7-TOMCAT-0001-VILLE',
                                                                                      'PASSWORD': 	'X04_0001_WEBAPP_INSTALLER',
                                                                                      'ROOT':		'/',
                                                                                     },
                                                                 'WEBAPP_RO': {
                                                                               'LOGIN':          'X04_0001_WEBAPP_RO',
                                                                               'SERVER':         'X04-R7-TOMCAT-0001-VILLE',
                                                                               'PASSWORD':       'X04_0001_WEBAPP_RO',
                                                                               'ROOT':           '/',
                                                                              },
                                                                 'DATAS': {
                                                                           'LOGIN': 		'X04_0001_WEBAPP_INSTALLER',
                                                                           'SERVER':		'X04-R7-TOMCAT-0001-VILLE',
                                                                           'PASSWORD': 		'X04_0001_WEBAPP_INSTALLER',
                                                                           'ROOT':		'/',
                                                                          },
                                                                }
                                                      },
                                              '0002': {
                                                       'VILLE': {
                                                                 'WEBAPP_INSTALLER': {
                                                                                      'LOGIN': 		'X01_0002_WEBAPP_INSTALLER',
                                                                                      'SERVER':		'X04-R7-TOMCAT-0001-VILLE',
                                                                                      'PASSWORD': 	'X01_0002_WEBAPP_INSTALLER',
                                                                                      'ROOT':		'/',
                                                                                     },
                                                                 'WEBAPP_RO': {
                                                                               'LOGIN':          'X04_0002_WEBAPP_RO',
                                                                               'SERVER':         'X04-R7-TOMCAT-0002-VILLE',
                                                                               'PASSWORD':       'X04_0002_WEBAPP_RO',
                                                                               'ROOT':           '/',
                                                                              },
                                                                 'DATAS': {
                                                                           'LOGIN': 		'X04_0002_WEBAPP_INSTALLER',
                                                                           'SERVER':		'X04-R7-TOMCAT-0002-VILLE',
                                                                           'PASSWORD': 		'X04_0002_WEBAPP_INSTALLER',
                                                                           'ROOT':		'/',
                                                                          },
                                                                }
                                                      }
                                             }
                                  }
                           }
                   }

                   
    @bip
    def is_virtual( self, path ):

        if path == '/':
            return [ True, False, self.__d.keys() ]
     
        l_dir = path.split( '/' )[ 1: ]

        try:

            return [ 
                       True, 
                       len( l_dir ) >  VirtualMap.__max_keys,
                                   VirtualMap.__d_le[
                                                         min(
                                                                 len( l_dir ),
                                                                 VirtualMap.__max_keys
                                                         )
                                                    ]( self, *l_dir ).keys()
                   ]

        except Exception, e:
            from colorama import Fore
            print( Fore.RED + repr( e  ) + Fore.RESET )
            return [ False, False, os ]
        
        return [ False, False ]

class FTPInstallerAbstractedFS(object):
    """A class used to interact with the file system, providing a
    cross-platform interface compatible with both Windows and
    UNIX style filesystems where all paths use "/" separator.

    AbstractedFS distinguishes between "real" filesystem paths and
    "virtual" ftp paths emulating a UNIX chroot jail where the user
    can not escape its home directory (example: real "/home/user"
    path will be seen as "/" by the client)

    It also provides some utility methods and wraps around all os.*
    calls involving operations against the filesystem like creating
    files or removing directories.
    """

    @bip
    def __init__(self, root, cmd_channel):
        """
         - (str) root: the user "real" home directory (e.g. '/home/user')
         - (instance) cmd_channel: the FTPHandler class instance
        """
        # Set initial current working directory.
        # By default initial cwd is set to "/" to emulate a chroot jail.
        # If a different behavior is desired (e.g. initial cwd = root,
        # to reflect the real filesystem) users overriding this class
        # are responsible to set _cwd attribute as necessary.
        self._cwd = '/'
        self._root = '/home/cloudmgr/.emptydir'
        self.cmd_channel = cmd_channel

        self.__virtualmap = VirtualMap()

    @property
    def virtualmap( self ):
        return self.__virtualmap

    @property
    @bip
    def root(self):
        """The user home directory."""
        return self._root

    @property
    @bip
    def cwd(self):
        """The user current working directory."""
        return self._cwd

    @root.setter
    @bip
    def root(self, path):
        self._root = path

    @cwd.setter
    @bip
    def cwd(self, path):
        self._cwd = path

    # --- Pathname / conversion utilities
    @bip
    def ftpnorm(self, ftppath):
        """Normalize a "virtual" ftp pathname (tipically the raw string
        coming from client) depending on the current working directory.

        Example (having "/foo" as current working directory):
        >>> ftpnorm('bar')
        '/foo/bar'

        Note: directory separators are system independent ("/").
        Pathname returned is always absolutized.
        """
        if os.path.isabs(ftppath):
            p = os.path.normpath(ftppath)
        else:
            p = os.path.normpath(os.path.join(self.cwd, ftppath))
        # normalize string in a standard web-path notation having '/'
        # as separator.
        p = p.replace("\\", "/")
        # os.path.normpath supports UNC paths (e.g. "//a/b/c") but we
        # don't need them.  In case we get an UNC path we collapse
        # redundant separators appearing at the beginning of the string
        while p[:2] == '//':
            p = p[1:]
        # Anti path traversal: don't trust user input, in the event
        # that self.cwd is not absolute, return "/" as a safety measure.
        # This is for extra protection, maybe not really necessary.
        if not os.path.isabs(p):
            p = "/"
        return p

    @bip
    def ftp2fs(self, ftppath):
        """Translate a "virtual" ftp pathname (tipically the raw string
        coming from client) into equivalent absolute "real" filesystem
        pathname.

        Example (having "/home/user" as root directory):
        >>> ftp2fs("foo")
        '/home/user/foo'

        Note: directory separators are system dependent.
        """
# PGS       # as far as I know, it should always be path traversal safe...
# PGS       if os.path.normpath(self.root) == os.sep:
# PGS           return os.path.normpath(self.ftpnorm(ftppath))
# PGS       else:
# PGS           p = self.ftpnorm(ftppath)[1:]
# PGS           return os.path.normpath(os.path.join(self.root, p))
        return ftppath


    @bip
    def fs2ftp(self, fspath):
        """Translate a "real" filesystem pathname into equivalent
        absolute "virtual" ftp pathname depending on the user's
        root directory.

        Example (having "/home/user" as root directory):
        >>> fs2ftp("/home/user/foo")
        '/foo'

        As for ftpnorm, directory separators are system independent
        ("/") and pathname returned is always absolutized.

        On invalid pathnames escaping from user's root directory
        (e.g. "/home" when root is "/home/user") always return "/".
        """
# PGS        if os.path.isabs(fspath):
# PGS            p = os.path.normpath(fspath)
# PGS        else:
# PGS            p = os.path.normpath(os.path.join(self.root, fspath))
# PGS        if not self.validpath(p):
# PGS            return '/'
# PGS        p = p.replace(os.sep, "/")
# PGS        p = p[len(self.root):]
# PGS        if not p.startswith('/'):
# PGS            p = '/' + p
# PGS        return p
        return fspath

    @bip
    def validpath(self, path):
        """Check whether the path belongs to user's home directory.
        Expected argument is a "real" filesystem pathname.

        If path is a symbolic link it is resolved to check its real
        destination.

        Pathnames escaping from user's root directory are considered
        not valid.
        """
# PGS        root = self.realpath(self.root)
# PGS       path = self.realpath(path)
# PGS       if not root.endswith(os.sep):
# PGS           root = root + os.sep
# PGS       if not path.endswith(os.sep):
# PGS           path = path + os.sep
# PGS       if path[0:len(root)] == root:
# PGS           return True
# PGS       return False
        return True

    # --- Wrapper methods around open() and tempfile.mkstemp

    @bip
    def open(self, filename, mode):
        """Open a file returning its handler."""
        return open(filename, mode)

    @bip
    def mkstemp(self, suffix='', prefix='', dir=None, mode='wb'):
        """A wrap around tempfile.mkstemp creating a file with a unique
        name.  Unlike mkstemp it returns an object with a file-like
        interface.
        """
        class FileWrapper:
            def __init__(self, fd, name):
                self.file = fd
                self.name = name
            def __getattr__(self, attr):
                return getattr(self.file, attr)

        text = not 'b' in mode
        # max number of tries to find out a unique file name
        tempfile.TMP_MAX = 50
        fd, name = tempfile.mkstemp(suffix, prefix, dir, text=text)
        file = os.fdopen(fd, mode)
        return FileWrapper(file, name)

    # --- Wrapper methods around os.* calls

    @update_os
    @bip
    def chdir(self, path, os = os):
        """Change the current directory."""
        # temporarily join the specified directory to see if we have
        # permissions to do so
        basedir = os.getcwd()
        try:
            os.chdir(path)
        except OSError:
            raise
        else:
            os.chdir(basedir)
            self._cwd = self.fs2ftp(path)

    @bip
    def mkdir(self, path):
        """Create the specified directory."""
        os.mkdir(path)

    @update_os
    @bip
# PGS    def listdir(self, path):
    def listdir(self, path, os = os):
        """List the content of a directory."""
        print path
        return os.listdir(path)

    @bip
    def rmdir(self, path):
        """Remove the specified directory."""
        os.rmdir(path)

    @bip
    def remove(self, path):
        """Remove the specified file."""
        os.remove(path)

    @bip
    def rename(self, src, dst):
        """Rename the specified src file to the dst filename."""
        os.rename(src, dst)

    @bip
    def chmod(self, path, mode):
        """Change file/directory mode."""
        if not hasattr(os, 'chmod'):
            raise NotImplementedError
        os.chmod(path, mode)

    @bip
    def stat(self, path):
        """Perform a stat() system call on the given path."""
        return os.stat(path)

    @bip
    def lstat(self, path):
        """Like stat but does not follow symbolic links."""
        return os.lstat(path)

    if not hasattr(os, 'lstat'):
        lstat = stat

    # --- Wrapper methods around os.path.* calls

    @bip
    def isfile(self, path):
        """Return True if path is a file."""
        return os.path.isfile(path)

    @bip
    def islink(self, path):
        """Return True if path is a symbolic link."""
        return os.path.islink(path)

    @update_os
    @bip
# PGS    def isdir(self, path):
    def isdir(self, path, os = os ):
        """Return True if path is a directory."""
        return os.path.isdir(path)

    @bip
    def getsize(self, path):
        """Return the size of the specified file in bytes."""
        return os.path.getsize(path)

    @bip
    def getmtime(self, path):
        """Return the last modified time as a number of seconds since
        the epoch."""
        return os.path.getmtime(path)

    @bip
    def realpath(self, path):
        """Return the canonical version of path eliminating any
        symbolic links encountered in the path (if they are
        supported by the operating system).
        """
        return os.path.realpath(path)

    @bip
    def lexists(self, path):
        """Return True if path refers to an existing path, including
        a broken or circular symbolic link.
        """
        return os.path.lexists(path)

    @bip
    def get_user_by_uid(self, uid):
        """Return the username associated with user id.
        If this can't be determined return raw uid instead.
        On Windows just return "owner".
        """
        if pwd is not None:
            try:
                return pwd.getpwuid(uid).pw_name
            except KeyError:
                return uid
        else:
            return "owner"

    @bip
    def get_group_by_gid(self, gid):
        """Return the groupname associated with group id.
        If this can't be determined return raw gid instead.
        On Windows just return "group".
        """
        if grp is not None:
            try:
                return grp.getgrgid(gid).gr_name
            except KeyError:
                return gid
        else:
            return "group"

    if hasattr(os, 'readlink'):
        def readlink(self, path):
            """Return a string representing the path to which a
            symbolic link points.
            """
            return os.readlink(path)

    # --- Listing utilities

    @bip
    def get_list_dir(self, path):
        """"Return an iterator object that yields a directory listing
        in a form suitable for LIST command.
        """
        if self.isdir(path):
            listing = self.listdir(path)
            listing.sort()
            return self.format_list(path, listing)
        # if path is a file or a symlink we return information about it
        else:
            basedir, filename = os.path.split(path)
            self.lstat(path)  # raise exc in case of problems
            return self.format_list(basedir, [filename])

    @bip
    def format_list(self, basedir, listing, ignore_err=True):
        """Return an iterator object that yields the entries of given
        directory emulating the "/bin/ls -lA" UNIX command output.

         - (str) basedir: the absolute dirname.
         - (list) listing: the names of the entries in basedir
         - (bool) ignore_err: when False raise exception if os.lstat()
         call fails.

        On platforms which do not support the pwd and grp modules (such
        as Windows), ownership is printed as "owner" and "group" as a
        default, and number of hard links is always "1". On UNIX
        systems, the actual owner, group, and number of links are
        printed.

        This is how output appears to client:


        -rw-rw-rw-   1 owner   group        380 Sep 02  3:40 module.py
        """
# PGS        if self.cmd_channel.use_gmt_times:
# PGS            timefunc = time.gmtime
# PGS        else:
# PGS            timefunc = time.localtime
# PGS        now = time.time()
# PGS        for basename in listing:
# PGS            file = os.path.join(basedir, basename)
# PGS            try:
# PGS                st = self.lstat(file)
# PGS            except OSError:
# PGS                if ignore_err:
# PGS                    continue
# PGS                raise
# PGS            perms = _filemode(st.st_mode)  # permissions
# PGS            nlinks = st.st_nlink  # number of links to inode
# PGS            if not nlinks:  # non-posix system, let's use a bogus value
# PGS                nlinks = 1
# PGS            size = st.st_size  # file size
# PGS            uname = self.get_user_by_uid(st.st_uid)
# PGS            gname = self.get_group_by_gid(st.st_gid)
# PGS            mtime = timefunc(st.st_mtime)
# PGS            # if modificaton time > 6 months shows "month year"
# PGS            # else "month hh:mm";  this matches proftpd format, see:
# PGS            # http://code.google.com/p/pyftpdlib/issues/detail?id=187
# PGS            if (now - st.st_mtime) > 180 * 24 * 60 * 60:
# PGS                fmtstr = "%d  %Y"
# PGS            else:
# PGS                fmtstr = "%d %H:%M"
# PGS            try:
# PGS                mtimestr = "%s %s" % (_months_map[mtime.tm_mon],
# PGS                                      time.strftime(fmtstr, mtime))
# PGS            except ValueError:
# PGS                # It could be raised if last mtime happens to be too
# PGS                # old (prior to year 1900) in which case we return
# PGS                # the current time as last mtime.
# PGS                mtime = timefunc()
# PGS                mtimestr = "%s %s" % (_months_map[mtime.tm_mon],
# PGS                                      time.strftime("%d %H:%M", mtime))
# PGS
# PGS            # if the file is a symlink, resolve it, e.g. "symlink -> realfile"
# PGS            if stat.S_ISLNK(st.st_mode) and hasattr(self, 'readlink'):
# PGS                basename = basename + " -> " + self.readlink(file)
# PGS
# PGS            # formatting is matched with proftpd ls output
# PGS            yield "%s %3s %-8s %-8s %8s %s %s\r\n" % (perms, nlinks, uname, gname,
# PGS                                                      size, mtimestr, basename)
        for dir in listing:
            yield '%s\r\n' % ( dir )

    @bip
    def format_mlsx(self, basedir, listing, perms, facts, ignore_err=True):
        """Return an iterator object that yields the entries of a given
        directory or of a single file in a form suitable with MLSD and
        MLST commands.

        Every entry includes a list of "facts" referring the listed
        element.  See RFC-3659, chapter 7, to see what every single
        fact stands for.

         - (str) basedir: the absolute dirname.
         - (list) listing: the names of the entries in basedir
         - (str) perms: the string referencing the user permissions.
         - (str) facts: the list of "facts" to be returned.
         - (bool) ignore_err: when False raise exception if os.stat()
         call fails.

        Note that "facts" returned may change depending on the platform
        and on what user specified by using the OPTS command.

        This is how output could appear to the client issuing
        a MLSD request:

        type=file;size=156;perm=r;modify=20071029155301;unique=801cd2; music.mp3
        type=dir;size=0;perm=el;modify=20071127230206;unique=801e33; ebooks
        type=file;size=211;perm=r;modify=20071103093626;unique=801e32; module.py
        """
        if self.cmd_channel.use_gmt_times:
            timefunc = time.gmtime
        else:
            timefunc = time.localtime
        permdir = ''.join([x for x in perms if x not in 'arw'])
        permfile = ''.join([x for x in perms if x not in 'celmp'])
        if ('w' in perms) or ('a' in perms) or ('f' in perms):
            permdir += 'c'
        if 'd' in perms:
            permdir += 'p'
        for basename in listing:
            file = os.path.join(basedir, basename)
            retfacts = dict()
            # in order to properly implement 'unique' fact (RFC-3659,
            # chapter 7.5.2) we are supposed to follow symlinks, hence
            # use os.stat() instead of os.lstat()
            try:
                st = self.stat(file)
            except OSError:
                if ignore_err:
                    continue
                raise
            # type + perm
            if stat.S_ISDIR(st.st_mode):
                if 'type' in facts:
                    if basename == '.':
                        retfacts['type'] = 'cdir'
                    elif basename == '..':
                        retfacts['type'] = 'pdir'
                    else:
                        retfacts['type'] = 'dir'
                if 'perm' in facts:
                    retfacts['perm'] = permdir
            else:
                if 'type' in facts:
                    retfacts['type'] = 'file'
                if 'perm' in facts:
                    retfacts['perm'] = permfile
            if 'size' in facts:
                retfacts['size'] = st.st_size  # file size
            # last modification time
            if 'modify' in facts:
                try:
                    retfacts['modify'] = time.strftime("%Y%m%d%H%M%S",
                                                        timefunc(st.st_mtime))
                # it could be raised if last mtime happens to be too old
                # (prior to year 1900)
                except ValueError:
                    pass
            if 'create' in facts:
                # on Windows we can provide also the creation time
                try:
                    retfacts['create'] = time.strftime("%Y%m%d%H%M%S",
                                                        timefunc(st.st_ctime))
                except ValueError:
                    pass
            # UNIX only
            if 'unix.mode' in facts:
                retfacts['unix.mode'] = oct(st.st_mode & 0777)
            if 'unix.uid' in facts:
                retfacts['unix.uid'] = st.st_uid
            if 'unix.gid' in facts:
                retfacts['unix.gid'] = st.st_gid

            # We provide unique fact (see RFC-3659, chapter 7.5.2) on
            # posix platforms only; we get it by mixing st_dev and
            # st_ino values which should be enough for granting an
            # uniqueness for the file listed.
            # The same approach is used by pure-ftpd.
            # Implementors who want to provide unique fact on other
            # platforms should use some platform-specific method (e.g.
            # on Windows NTFS filesystems MTF records could be used).
            if 'unique' in facts:
                retfacts['unique'] = "%xg%x" % (st.st_dev, st.st_ino)

            # facts can be in any order but we sort them by name
            factstring = "".join(["%s=%s;" % (x, retfacts[x]) \
                                  for x in sorted(retfacts.keys())])
            yield "%s %s\r\n" % (factstring, basename)
